/*
Universidad Del Valle de Guatemala
Facultad de Ingeniería
Departamento de Electrónica, Mecatrónica y Biomédica
Electrónica Digital 2

Carlos Daniel Camacho Tista - 22690
Susan Daniela Guevara Catalán - 22519

Proyecto 3
*/

/********** LIBRERÍAS *********/
#include <Arduino.h>
#include "Wire.h"               // Librería para la comunicación I2C
#include <Adafruit_NeoPixel.h>  // Librería para el neopixel
#include <HardwareSerial.h>     // Permite la transmisión de datos con la STM32
#include "BluetoothSerial.h" // Librería para Bluetooth Serial


/********** DEFINICIÓN DE PINES ********/
// Configuración del neopixel
#define neopin 12
#define numeroPixel 16

// Configurar el puerto UART en ESP32
HardwareSerial UART_ESP32(2);  // UART2

// Dirección I2C del MPU-6050
const int MPU = 0x68;

// Crear una instancia para Bluetooth
BluetoothSerial SerialBT;

// Pines para UART2 en ESP32
#define RXD2 16
#define TXD2 17

Adafruit_NeoPixel pixels(numeroPixel, neopin, NEO_GRB + NEO_KHZ800);

// Variables para los datos del sensor
int16_t AccX, AccY, AccZ;
int16_t GyroX, GyroY, GyroZ;

// Variables para los datos mapeados
uint8_t MappedAccX, MappedAccY, MappedAccZ;
uint8_t MappedGyroX, MappedGyroY, MappedGyroZ;
uint8_t MappedAccXB, MappedAccYB, MappedAccZB;

/********** PROTOTIPOS DE FUNCIONES ********/

/********** CONFIGURACIÓN INICIAL DE LOS PINES ********/
void setup() {
  // Para monitorear desde el puerto serie (UART0)
  Serial.begin(9600);  
   // Inicializar Bluetooth con un nombre
  SerialBT.begin("ESP32_Bluetooth_1"); // Cambia "ESP32_Bluetooth" por el nombre deseado
  Serial.println("Bluetooth inicializado. Conéctate a 'ESP32_Bluetooth'.");

  // Iniciar UART2 a: 115200 baudios, configuración de datos, pin RX, pin TX
  UART_ESP32.begin(115200, SERIAL_8N1, RXD2, TXD2); 
  // Definición del Neopixel como salida
  pixels.begin();
  pixels.clear();
  pixels.setBrightness(200);
  
  // Inicializar I2C
  Wire.begin();

  // Configurar el MPU-6050
  Wire.beginTransmission(MPU);
  Wire.write(0x6B);  // Dirección del registro PWR_MGMT_1
  Wire.write(0);     // Despertar el MPU-6050
  Wire.endTransmission(true);

  Serial.println("MPU-6050 inicializado.");
}

void loop() {
  // Revisa si hay datos disponibles en UART2
  if (UART_ESP32.available()) {
      // Leer datos de acelerómetro y giroscopio
      Wire.beginTransmission(MPU);
      Wire.write(0x3B); // Dirección del primer registro de datos (ACCEL_XOUT_H)
      Wire.endTransmission(false);
      Wire.requestFrom((uint16_t)MPU, (uint8_t)14, true);

      // Leer aceleraciones
      AccX = (Wire.read() << 8 | Wire.read());
      AccY = (Wire.read() << 8 | Wire.read());
      AccZ = (Wire.read() << 8 | Wire.read());

      // Leer giroscopios
      GyroX = (Wire.read() << 8 | Wire.read());
      GyroY = (Wire.read() << 8 | Wire.read());
      GyroZ = (Wire.read() << 8 | Wire.read());

      // Mapear los valores al rango de 0 a 9
      MappedAccX = map(AccX, -32768, 32767, 0, 9);
      MappedAccY = map(AccY, -32768, 32767, 0, 9);
      MappedAccZ = map(AccZ, -32768, 32767, 0, 9);

      MappedGyroX = map(GyroX, -32768, 32767, 0, 9);
      MappedGyroY = map(GyroY, -32768, 32767, 0, 9);
      MappedGyroZ = map(GyroZ, -32768, 32767, 0, 9);

  // Imprimir los valores mapeados en el monitor serie
  Serial.print("Mapped Aceleracion: X=");
  Serial.print(MappedAccX);
  Serial.print(" Y=");
  Serial.print(MappedAccY);
  Serial.print(" Z=");
  Serial.println(MappedAccZ);

  Serial.print("Mapped Giroscopio: X=");
  Serial.print(MappedGyroX);
  Serial.print(" Y=");
  Serial.print(MappedGyroY);
  Serial.print(" Z=");
  Serial.println(MappedGyroZ);

  // Enviar los valores mapeados a través de UART2
  UART_ESP32.print(MappedAccX);

  // Esperar medio segundo antes de la siguiente lectura
  delay(500);

    uint8_t incomingByte = UART_ESP32.read();  // Lee un byte desde UART2
    Serial.print("Recibido por UART2: ");
    Serial.println(incomingByte);

    switch(incomingByte){
        case 1:
          for (int i = 0; i < numeroPixel; i++) {
            pixels.setPixelColor(i, pixels.Color(255, 0, 0)); 
          }
          pixels.show();
          Serial.println("LED cambiado a rojo");
          delay(1000);
          break;
        case 2:
          for (int i = 0; i < numeroPixel; i++) {
            pixels.setPixelColor(i, pixels.Color(0, 255, 0)); 
          }
          pixels.show();
          Serial.println("LED cambiado a verde");
          delay(1000);
          break;
        case 3:
          for (int i = 0; i < numeroPixel; i++) {
            pixels.setPixelColor(i, pixels.Color(0, 0, 255)); 
          }
          pixels.show();
          Serial.println("LED cambiado a azul");
          delay(1000);
          break; 
        default:
          Serial.println("Comando no reconocido.");
          break;
    }
  }

  // Verificar si hay datos recibidos desde el terminal Bluetooth
  if (SerialBT.available()) {
    String command = SerialBT.readStringUntil('\n'); // Leer comando enviado por Bluetooth
    command.trim(); // Eliminar espacios o caracteres no deseados

    // Comprobar si el comando es "GET"
    if (command.equalsIgnoreCase("GET")) {
      // Leer datos del acelerómetro
      Wire.beginTransmission(MPU);
      Wire.write(0x3B); // Dirección del primer registro de datos (ACCEL_XOUT_H)
      Wire.endTransmission(false);
      Wire.requestFrom((uint16_t)MPU, (uint8_t)14, true); // Solicitar 6 bytes de datos (solo aceleración)

      // Leer aceleración en X, Y, Z
      AccX = (Wire.read() << 8 | Wire.read());
      AccY = (Wire.read() << 8 | Wire.read());
      AccZ = (Wire.read() << 8 | Wire.read());

      MappedAccXB = map(AccX, -32768, 32767, 0, 9);
      MappedAccYB = map(AccY, -32768, 32767, 0, 9);
      MappedAccZB = map(AccZ, -32768, 32767, 0, 9);

      // Enviar el valor de AccX por Bluetooth
      SerialBT.print("AccX: ");
      SerialBT.println(MappedAccXB);

      // También imprimirlo en el monitor serie
      Serial.print("Comando recibido: ");
      Serial.print(command);
      Serial.print(" -> AccX: ");
      Serial.println(MappedAccXB);
    } else {
      // Respuesta si el comando no es válido
      SerialBT.println("Comando no reconocido. Usa 'GET' para obtener datos.");
    }
  }

  // Agregar un pequeño retardo para evitar saturar la comunicación
  delay(100);

}
